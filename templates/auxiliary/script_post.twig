<script>


function previewPost()
{
  // Firefox doesn't render <marquee> that have been put it using javascript
  if (document.forms.postmodify.elements[post_box_name].value.indexOf('[move]') != -1)
  {
    return submitThisOnce(document.forms.postmodify);
  }
  if (window.XMLHttpRequest)
  {
    // Opera didn't support setRequestHeader() before 8.01.
    if ('opera' in window)
    {
      var test = new XMLHttpRequest();
      if (!('setRequestHeader' in test))
        return submitThisOnce(document.forms.postmodify);
    }
    // !!! Currently not sending poll options and option checkboxes.
    var x = new Array();
    var textFields = ['subject', post_box_name, 'icon', 'guestname', 'email', 'evtitle', 'question', 'topic', session_var];
    var numericFields = [
      'board', 'topic', 'last_msg',
      'eventid', 'calendar', 'year', 'month', 'day',
      'poll_max_votes', 'poll_expire', 'poll_change_vote', 'poll_hide'
    ];
    var checkboxFields = [
      'ns'
    ];

    for (var i = 0, n = textFields.length; i < n; i++)
      if (textFields[i] in document.forms.postmodify)
      {
        // Handle the WYSIWYG editor.
        if (textFields[i] == post_box_name && ('oEditorHandle_'+post_box_name) in window && window['oEditorHandle_'+post_box_name].bRichTextEnabled)
          x[x.length] = 'message_mode=1&' + textFields[i] + '=' + window['oEditorHandle_'+post_box_name].getText(false).replace(/&#/g, '&#38;#').php_to8bit().php_urlencode();
        else
          x[x.length] = textFields[i] + '=' + document.forms.postmodify[textFields[i]].value.replace(/&#/g, '&#38;#').php_to8bit().php_urlencode();
      }
    for (var i = 0, n = numericFields.length; i < n; i++)
      if (numericFields[i] in document.forms.postmodify && 'value' in document.forms.postmodify[numericFields[i]])
        x[x.length] = numericFields[i] + '=' + parseInt(document.forms.postmodify.elements[numericFields[i]].value);
    for (var i = 0, n = checkboxFields.length; i < n; i++)
      if (checkboxFields[i] in document.forms.postmodify && document.forms.postmodify.elements[checkboxFields[i]].checked)
        x[x.length] = checkboxFields[i] + '=' + document.forms.postmodify.elements[checkboxFields[i]].value;

    sendXMLDocument(smf_prepareScriptUrl(smf_scripturl) + 'action=post2' + (current_board ? ';board=' + current_board : '') + (make_poll ? ';poll' : '') + ';preview;xml', x.join('&'), onDocSent);

    document.getElementById('preview_section').style.display = '';
    setInnerHTML(document.getElementById('preview_subject'), txt_preview_title);
    setInnerHTML(document.getElementById('preview_body'), txt_preview_fetch);

    return false;
  }
  else
    return submitThisOnce(document.forms.postmodify);
}
function onDocSent(XMLDoc)
{
  if (!XMLDoc)
  {
    document.forms.postmodify.preview.onclick = new function ()
    {
      return true;
    }
    document.forms.postmodify.preview.click();
  }

  // Show the preview section.
  var preview = XMLDoc.getElementsByTagName('smf')[0].getElementsByTagName('preview')[0];
  setInnerHTML(document.getElementById('preview_subject'), preview.getElementsByTagName('subject')[0].firstChild.nodeValue);

  var bodyText = '';
  for (var i = 0, n = preview.getElementsByTagName('body')[0].childNodes.length; i < n; i++)
    bodyText += preview.getElementsByTagName('body')[0].childNodes[i].nodeValue;

  setInnerHTML(document.getElementById('preview_body'), bodyText);
  document.getElementById('preview_body').className = 'post';

  // Show a list of errors (if any).
  var errors = XMLDoc.getElementsByTagName('smf')[0].getElementsByTagName('errors')[0];
  var errorList = new Array();
  for (var i = 0, numErrors = errors.getElementsByTagName('error').length; i < numErrors; i++)
    errorList[errorList.length] = errors.getElementsByTagName('error')[i].firstChild.nodeValue;
  document.getElementById('errors').style.display = numErrors == 0 ? 'none' : '';
  document.getElementById('error_serious').style.display = errors.getAttribute('serious') == 1 ? '' : 'none';
  setInnerHTML(document.getElementById('error_list'), numErrors == 0 ? '' : errorList.join('<br />'));

  // Show a warning if the topic has been locked.
  document.getElementById('lock_warning').style.display = errors.getAttribute('topic_locked') == 1 ? '' : 'none';

  // Adjust the color of captions if the given data is erroneous.
  var captions = errors.getElementsByTagName('caption');
  for (var i = 0, numCaptions = errors.getElementsByTagName('caption').length; i < numCaptions; i++)
    if (document.getElementById('caption_' + captions[i].getAttribute('name')))
      document.getElementById('caption_' + captions[i].getAttribute('name')).className = captions[i].getAttribute('class');

  if (errors.getElementsByTagName('post_error').length == 1)
    document.forms.postmodify[post_box_name].style.border = '1px solid red';
  else if (document.forms.postmodify[post_box_name].style.borderColor == 'red' || document.forms.postmodify[post_box_name].style.borderColor == 'red red red red')
  {
    if ('runtimeStyle' in document.forms[post_box_name].message)
      document.forms[post_box_name].message.style.borderColor = '';
    else
      document.forms[post_box_name].message.style.border = null;
  }

  // Set the new last message id.
  if ('last_msg' in document.forms.postmodify)
    document.forms.postmodify.last_msg.value = XMLDoc.getElementsByTagName('smf')[0].getElementsByTagName('last_msg')[0].firstChild.nodeValue;

  // Remove the new image from old-new replies!
  for (i = 0; i < new_replies.length; i++)
    document.getElementById('image_new_' + new_replies[i]).style.display = 'none';
  new_replies = new Array();

  var ignored_replies = new Array(), ignoring;
  var newPosts = XMLDoc.getElementsByTagName('smf')[0].getElementsByTagName('new_posts')[0] ? XMLDoc.getElementsByTagName('smf')[0].getElementsByTagName('new_posts')[0].getElementsByTagName('post') : {length: 0};
  var numNewPosts = newPosts.length;
  if (numNewPosts != 0)
  {
    var newPostsHTML = '<span id="new_replies"><' + '/span>';
    for (var i = 0; i < numNewPosts; i++)
    {
      new_replies[new_replies.length] = newPosts[i].getAttribute("id");

      ignoring = false;
      if (newPosts[i].getElementsByTagName("is_ignored")[0].firstChild.nodeValue != 0)
        ignored_replies[ignored_replies.length] = ignoring = newPosts[i].getAttribute("id");

      newPostsHTML += '<div class="windowbg' + (++reply_counter % 2 == 0 ? '2' : '') + ' core_posts"><span class="topslice"><span></span></span><div class="content" id="msg' + newPosts[i].getAttribute("id") + '"><div class="floatleft"><h5>'+posted_by+': ' + newPosts[i].getElementsByTagName("poster")[0].firstChild.nodeValue + '</h5><span class="smalltext">&#171;&nbsp;<strong>'+on+':</strong> ' + newPosts[i].getElementsByTagName("time")[0].firstChild.nodeValue + '&nbsp;&#187;</span> <img src="' + smf_images_url + '/'+user_language+'/new.gif" alt="'+preview_new+'" id="image_new_' + newPosts[i].getAttribute("id") + '" /></div>';
{% if context.can_quote %}
      newPostsHTML += '<ul class="reset smalltext quickbuttons" id="msg_' + newPosts[i].getAttribute("id") + '_quote"><li class="quote_button"><a href="#postmodify" onclick="return insertQuoteFast(\'' + newPosts[i].getAttribute("id") + '\');"><span>Insert Quote</span><' + '/a></li></ul>';
{% endif %}
      newPostsHTML += '<br class="clear" />';

      if (ignoring)
        newPostsHTML += '<div id="msg_' + newPosts[i].getAttribute("id") + '_ignored_prompt" class="smalltext">'+ignoring_user+'<a href="#" id="msg_' + newPosts[i].getAttribute("id") + '_ignored_link" style="display: none;">'+show_ignore_user_post+'</a></div>';

      newPostsHTML += '<div class="list_posts smalltext" id="msg_' + newPosts[i].getAttribute("id") + '_body">' + newPosts[i].getElementsByTagName("message")[0].firstChild.nodeValue + '<' + '/div></div><span class="botslice"><span></span></span></div>';
    }
    setOuterHTML(document.getElementById('new_replies'), newPostsHTML);
  }

  var numIgnoredReplies = ignored_replies.length;
  if (numIgnoredReplies != 0)
  {
    for (var i = 0; i < numIgnoredReplies; i++)
    {
      aIgnoreToggles[ignored_replies[i]] = new smc_Toggle({
        bToggleEnabled: true,
        bCurrentlyCollapsed: !!show_additional_options,
        aSwappableContainers: [
          'msg_' + ignored_replies[i] + '_body',
          'msg_' + ignored_replies[i] + '_quote',
        ],
        aSwapLinks: [
          {
            sId: 'msg_' + ignored_replies[i] + '_ignored_link',
            msgExpanded: '',
            msgCollapsed: show_ignore_user_post
          }
        ]
      });
    }
  }

  if (typeof(smf_codeFix) != 'undefined')
    smf_codeFix();
}
var oSwapAdditionalOptions = new smc_Toggle({
  bToggleEnabled: true,
  bCurrentlyCollapsed: true,
  funcOnBeforeCollapse: function () {
    document.getElementById('additional_options').value = '0';
  },
  funcOnBeforeExpand: function () {
    document.getElementById('additional_options').value = '1';
  },
  aSwappableContainers: [
    'postMoreOptions',
    'postAttachment',
    'postAttachment2',
    'postAttachment3'
  ],
  aSwapImages: [
    {
      sId: 'postMoreExpand',
      srcExpanded: smf_images_url + '/collapse.gif',
      altExpanded: '-',
      srcCollapsed: smf_images_url + '/expand.gif',
      altCollapsed: '+'
    }
  ],
  aSwapLinks: [
    {
      sId: 'postMoreExpandLink',
      msgExpanded: post_additionalopt,
      msgCollapsed: post_additionalopt
    }
  ]
});
</script>
